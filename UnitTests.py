import unittest
from avg_wait_time_generator import wait_time_generator
from avg_wait_time_generator import filtered_wait_time_averages_stops

class TestAvgWaitTimeGenerator(unittest.TestCase):

    def test_wait_time_generator_8192(self):
        frequencies1 = [
            [22.1003088, 8192, '71C', 6267, '2022-10-05 10:11:43.378937', '2022-10-05'],
         [14.826080916666665, 8192, '71C', 3409, '2022-10-05 10:26:32.943792', '2022-10-05'],
         [18.467039683333333, 8192, '71C', 3417, '2022-10-05 10:45:00.966173', '2022-10-05'],
         [16.468245866666667, 8192, '71C', 6256, '2022-10-05 11:01:29.060925', '2022-10-05'],
         [21.049492933333333, 8192, '71C', 6267, '2022-10-05 12:15:29.251113', '2022-10-05'],
         [18.482552416666667, 8192, '71C', 6547, '2022-10-05 14:28:10.134046', '2022-10-05'],
         [7.5772137, 8192, '71C', 6459, '2022-10-05 14:35:44.766868', '2022-10-05'],
         [17.102501516666667, 8192, '71C', 3417, '2022-10-05 14:52:50.916959', '2022-10-05'],
         [18.993464033333332, 8192, '71C', 6452, '2022-10-05 15:11:50.524801', '2022-10-05'],
         [22.98311955, 8192, '71C', 3215, '2022-10-05 15:34:49.511974', '2022-10-05'],
         [1.8316907666666669, 8192, '71C', 3219, '2022-10-05 15:36:39.413420', '2022-10-05'],
         [24.8637805, 8192, '71C', 6738, '2022-10-05 16:01:31.240250', '2022-10-05'],
         [5.756448933333333, 8192, '71C', 6654, '2022-10-05 16:07:16.627186', '2022-10-05'],
         [17.992638383333333, 8192, '71C', 3417, '2022-10-05 17:14:53.568061', '2022-10-05'],
         [14.05591535, 8192, '71C', 3424, '2022-10-06 06:01:39.692940', '2022-10-06'],
         [21.208650183333337, 8192, '71C', 3324, '2022-10-06 06:22:52.211951', '2022-10-06'],
         [5.3382757, 8192, '71C', 6272, '2022-10-06 06:28:12.508493', '2022-10-06'],
         [23.394240183333334, 8192, '71C', 6654, '2022-10-06 07:25:18.711391', '2022-10-06'],
         [21.152816283333333, 8192, '71C', 6369, '2022-10-06 11:01:26.656099', '2022-10-06'],
         [27.562157116666665, 8192, '71C', 3422, '2022-10-06 11:29:00.385526', '2022-10-06'],
         [7.805163516666667, 8192, '71C', 6552, '2022-10-06 11:36:48.695337', '2022-10-06'],
         [17.678726183333332, 8192, '71C', 6056, '2022-10-06 11:54:29.418908', '2022-10-06'],
         [18.677834166666667, 8192, '71C', 3424, '2022-10-06 12:47:45.112477', '2022-10-06'],
         [14.17499175, 8192, '71C', 6058, '2022-10-06 13:45:17.679926', '2022-10-06'],
         [10.213052383333332, 8192, '71C', 3240, '2022-10-06 15:35:04.992256', '2022-10-06'],
         [29.464020466666668, 8192, '71C', 6638, '2022-10-06 16:04:32.833484', '2022-10-06'],
         [4.0997911333333334, 8192, '71C', 6552, '2022-10-06 16:08:38.820952', '2022-10-06'],
         [10.501332566666667, 8192, '71C', 6557, '2022-10-06 16:19:08.900906', '2022-10-06'],
         [25.6966607, 8192, '71C', 6645, '2022-10-06 22:12:55.396970', '2022-10-06'],
         [24.550536183333335, 8192, '71C', 6145, '2022-10-08 16:58:03.163068', '2022-10-08'],
         [23.557477916666667, 8192, '71C', 6544, '2022-10-08 19:57:56.199900', '2022-10-08'],
         [18.787476033333334, 8192, '71C', 3417, '2022-10-10 05:51:49.674785', '2022-10-10'],
         [28.6865299, 8192, '71C', 3322, '2022-10-10 06:20:30.866579', '2022-10-10'],
         [10.7327588, 8192, '71C', 6026, '2022-10-10 06:31:14.832107', '2022-10-10'],
         [25.366141983333332, 8192, '71C', 5945, '2022-10-10 06:56:36.800626', '2022-10-10'],
         [15.302292633333334, 8192, '71C', 3417, '2022-10-10 07:43:27.694561', '2022-10-10'],
         [29.825714966666666, 8192, '71C', 3322, '2022-10-10 08:13:17.237459', '2022-10-10'],
         [13.959286966666667, 8192, '71C', 6026, '2022-10-10 08:27:14.794677', '2022-10-10'],
         [16.059004616666666, 8192, '71C', 6267, '2022-10-10 08:43:18.334954', '2022-10-10'],
         [19.554598183333333, 8192, '71C', 5941, '2022-10-10 09:02:51.610845', '2022-10-10'],
         [11.447486999999999, 8192, '71C', 7101, '2022-10-10 09:14:18.460065', '2022-10-10'],
         [15.750017516666666, 8192, '71C', 6553, '2022-10-10 09:30:03.461116', '2022-10-10'],
         [17.897337383333333, 8192, '71C', 3417, '2022-10-10 10:23:37.948507', '2022-10-10']
        ]

        try8192 = wait_time_generator(8192, '71C')
        self.assertEqual(try8192, frequencies1)

    def test_wait_time_generator_8193(self):

        frequencies2 = [[22.138004149999997, 8193, '71C', 6267, '2022-10-05 10:12:38.324055', '2022-10-05'],
         [14.79824315, 8193, '71C', 3409, '2022-10-05 10:27:26.218644', '2022-10-05'],
         [16.61624588333333, 8193, '71C', 3417, '2022-10-05 10:44:03.193397', '2022-10-05'],
         [18.367934966666667, 8193, '71C', 6256, '2022-10-05 11:02:25.269495', '2022-10-05'],
         [21.0598509, 8193, '71C', 6267, '2022-10-05 12:16:23.004694', '2022-10-05'],
         [20.39349083333333, 8193, '71C', 6547, '2022-10-05 14:30:58.241743', '2022-10-05'],
         [7.5801304499999995, 8193, '71C', 6459, '2022-10-05 14:38:33.049570', '2022-10-05'],
         [17.11823671666667, 8193, '71C', 3417, '2022-10-05 14:55:40.143773', '2022-10-05'],
         [17.08523028333333, 8193, '71C', 6452, '2022-10-05 15:12:45.257590', '2022-10-05'],
         [22.958118233333334, 8193, '71C', 3215, '2022-10-05 15:35:42.744684', '2022-10-05'],
         [1.8537116166666665, 8193, '71C', 3219, '2022-10-05 15:37:33.967381', '2022-10-05'],
         [24.890270316666665, 8193, '71C', 6738, '2022-10-05 16:02:27.383600', '2022-10-05'],
         [5.72653015, 8193, '71C', 6654, '2022-10-05 16:08:10.975409', '2022-10-05'],
         [14.0667128, 8193, '71C', 3424, '2022-10-06 06:02:14.726235', '2022-10-06'],
         [21.224531133333336, 8193, '71C', 3324, '2022-10-06 06:23:28.198103', '2022-10-06'],
         [7.0543196833333335, 8193, '71C', 6272, '2022-10-06 06:30:31.457284', '2022-10-06'],
         [25.18874815, 8193, '71C', 6654, '2022-10-06 07:27:41.168764', '2022-10-06'],
         [14.404996383333334, 8193, '71C', 3424, '2022-10-06 10:40:48.974577', '2022-10-06'],
         [21.178684883333336, 8193, '71C', 6369, '2022-10-06 11:01:59.695670', '2022-10-06'],
         [27.516645083333334, 8193, '71C', 3422, '2022-10-06 11:29:30.694375', '2022-10-06'],
         [9.2405947, 8193, '71C', 6552, '2022-10-06 11:38:45.130057', '2022-10-06'],
         [18.692452399999997, 8193, '71C', 3424, '2022-10-06 12:48:21.712054', '2022-10-06'],
         [14.1339973, 8193, '71C', 6058, '2022-10-06 13:45:55.782533', '2022-10-06'],
         [10.226966483333333, 8193, '71C', 3240, '2022-10-06 15:35:44.922020', '2022-10-06'],
         [29.466302700000004, 8193, '71C', 6638, '2022-10-06 16:05:12.900182', '2022-10-06'],
         [6.201863033333334, 8193, '71C', 6552, '2022-10-06 16:11:25.011964', '2022-10-06'],
         [25.690627816666666, 8193, '71C', 6645, '2022-10-06 22:13:43.995977', '2022-10-06'],
         [22.37835025, 8193, '71C', 6145, '2022-10-08 16:58:42.583418', '2022-10-08'],
         [23.565775483333333, 8193, '71C', 6544, '2022-10-08 19:58:33.967358', '2022-10-08'],
         [17.09663361666667, 8193, '71C', 3417, '2022-10-10 05:50:40.845698', '2022-10-10'],
         [10.774869016666665, 8193, '71C', 6026, '2022-10-10 06:31:51.490424', '2022-10-10'],
         [25.3606958, 8193, '71C', 5945, '2022-10-10 06:57:13.132172', '2022-10-10'],
         [15.280427916666667, 8193, '71C', 3417, '2022-10-10 07:44:01.148370', '2022-10-10'],
         [11.92647515, 8193, '71C', 6026, '2022-10-10 08:27:53.960401', '2022-10-10'],
         [16.075120633333334, 8193, '71C', 6267, '2022-10-10 08:43:58.467639', '2022-10-10'],
         [19.507300166666667, 8193, '71C', 5941, '2022-10-10 09:03:28.905649', '2022-10-10'],
         [11.488660366666666, 8193, '71C', 7101, '2022-10-10 09:14:58.225271', '2022-10-10'],
         [15.691837016666666, 8193, '71C', 6553, '2022-10-10 09:30:39.735492', '2022-10-10']]

        try8193 = wait_time_generator(8193, '71C')
        self.assertEqual(try8193, frequencies2)

    def test_wait_time_generator_main(self):
        october_dates = ['2022-10-0' + str(i) for i in range(1, 7)]
        result = filtered_wait_time_averages_stops([8192, 8193], "71C", october_dates)
        self.assertEqual(result, {8192: 16.5351105408046, 8193: 16.847164451851853})


unittest.main()